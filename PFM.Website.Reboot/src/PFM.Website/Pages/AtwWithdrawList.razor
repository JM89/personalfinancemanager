@page "/atm-withdraws/list/{accountId:int}"
@using PFM.Website.Services
@using PFM.Website.Models
@inject AtmWithdrawService AtmWithdrawService
@inject BankAccountService BankAccountService
@inject NavigationManager NavigationManager

<PageTitle>ATM Withdraws</PageTitle>


<div class="row">
    <div class="col-lg-8">
        <h1>ATM Withdraws</h1>
    </div>
    @if (selectedBankAccount != null)
    {
        <div class="col-lg-4" style="text-align: left">
            <div class="alert alert-info" role="alert">
                <label><strong>Selected account: </strong></label>
                <br/>
                <label>@selectedBankAccount.BankName - @selectedBankAccount?.Name</label>
                <br/>
                <label>Balance: @selectedBankAccount?.DisplayedCurrentBalance</label>
            </div>
        </div>
    }
</div>

<div class="row">
    <div class="col-lg-10">
        <p>Manage the ATM Withdraws of a given bank account. You need at least one bank account to add new ATM Withdraws. Note that the system won't let you edit an existing ATM Withdraws, please delete and recreate so all movements appears on the bank account(s).</p>
    </div>
    @if (selectedBankAccount != null)
    {
        <div class="col-lg-2" style="text-align: right">
            <div style="text-align: right">
                <button class="btn btn-secondary btn-sm" @onclick="Create">Add new</button>
            </div>
        </div>
    }
</div>

@if (models == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <colgroup>
            <col width="15%" />
            <col width="25%" />
            <col width="12%" />
            <col width="12%" />
            <col width="12%" />
            <col width="15%" />
        </colgroup>
        <thead>
            <tr>
                <th>Date Withdrawal</th>
                <th>Description</th>
                <th>Initial Amount</th>
                <th>Current Amount</th>
                <th>Already Debited</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var m in models)
            {
                <tr>
                    <td>@m.DisplayedDateExpense</td>
                    <td>@m.Description</td>
                    <td>@m.DisplayedInitialAmount</td>
                    <td>@m.DisplayedCurrentAmount</td>
                    <td>
                        <input id="hasBeenAlreadyDebited" type="checkbox" @bind="@m.HasBeenAlreadyDebited" disabled>
                    </td>
                    <td>
                        <button class="btn btn-light btn-sm" @onclick="(() => ChangeDebitStatus(m.Id, m.HasBeenAlreadyDebited))"><i class="fa fa-thumbs-up"></i></button>
                        <button class="btn btn-light btn-sm" @onclick="(() => CloseAtmWithdraw(m.Id))"><i class="fa-solid fa-power-off"></i></button>
                        <button class="btn btn-light btn-sm" @onclick="(() => Delete(m))"><i class="fa-solid fa-trash"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Confirm @ref="DeleteConfirmation" ConfirmationChanged="ConfirmDelete"
             ConfirmationMessage=@($"Are you sure you want to delete \"{selected.Description}\"?")>
    </Confirm>

}

@code {

    [Parameter]
    public int? AccountId { get; set; }

    private List<AtmWithdrawListModel> models = new List<AtmWithdrawListModel>();
    private AtmWithdrawListModel selected = new AtmWithdrawListModel();
    protected PFM.Website.Components.ConfirmBase DeleteConfirmation { get; set; }
    private BankAccountListModel? selectedBankAccount;

    protected override async Task OnInitializedAsync()
    {
        selectedBankAccount = await BankAccountService.GetCurrentAccount(AccountId);
        if (selectedBankAccount != null)
        {
            models = await AtmWithdrawService.GetAll(selectedBankAccount.Id);
        }
    }

    void Create()
    {
        NavigationManager.NavigateTo($"/atm-withdraws/create/{selectedBankAccount?.Id}");
    }

    protected void Delete(AtmWithdrawListModel referenced)
    {
        selected = referenced;
        DeleteConfirmation.Show();
    }

    protected async Task ConfirmDelete(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await AtmWithdrawService.Delete(selected.Id);
            NavigationManager.NavigateTo($"/atm-withdraws/list/{selectedBankAccount?.Id}", true);
        }
    }

    protected async void ChangeDebitStatus(int id, bool debitStatus)
    {
        await AtmWithdrawService.ChangeDebitStatus(id, debitStatus);
        NavigationManager.NavigateTo($"/atm-withdraws/list/{selectedBankAccount?.Id}", true);
    }

    protected async void CloseAtmWithdraw(int id)
    {
        await AtmWithdrawService.CloseAtmWithdraw(id);
        NavigationManager.NavigateTo($"/atm-withdraws/list/{selectedBankAccount?.Id}", true);
    }
}

