@page "/expense-types/create"
@page "/expense-types/edit/{id:int}"
@using PFM.Website.Services
@using PFM.Website.Models
@inject ExpenseTypeService ExpenseTypeService
@inject NavigationManager NavigationManager
@using BlazorColorPicker


<PageTitle>Expense Types</PageTitle>

@if (Id != null)
{
    <h1>Edit Expense Types</h1>
}
else
{
    <h1>Create Expense Types</h1>
}

<br/>
<EditForm Model="expenseType" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="col-sm-8 text-danger">
        <ValidationSummary />
    </div>
    <div class="form-group row" style="height:50px">
        <label for="name" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10">
            <InputText id="name" @bind-Value="expenseType.Name" class="form-control"></InputText>
        </div>
        <br />
    </div>
    <div class="form-group row" style="height:50px">
        <label for="color" class="col-sm-2 col-form-label">Graph Color</label>
        <div class="col-sm-10">
            <button type="button" class="btn btn-light btn-sm" @onclick="OpenGraphColorModal">
                <div style="width:80px; background-color:#@expenseType.GraphColor" class="buttonColor"></div>
            </button>
            <ColorPicker IsOpened="isGraphColorModalOpened" Closed="ClosedGraphColorModal" MyColor="@expenseType.GraphColor">
            </ColorPicker>
        </div>
        <br />
    </div>
    <div class="form-group row" style="height:50px">
        <label for="showOnDashboard" class="col-sm-2 col-form-label">Show On Dashboard</label>
        <div class="col-sm-10">
            <InputCheckbox id="showOnDashboard" @bind-Value="expenseType.ShowOnDashboard"></InputCheckbox>
        </div>
        <br />
    </div>
    <br />
    <br />
    <button type="button" class="btn btn-secondary" @onclick="Back">Cancel</button>
    <button type="submit" class="btn btn-primary">Save</button>
    @if (Id != null)
    {
        <br />
        <br />
        <button type="button" class="btn btn-danger" @onclick="Delete">Delete</button>
    }
</EditForm>

<Confirm @ref="DeleteConfirmation" ConfirmationChanged="ConfirmDelete"
         ConfirmationMessage=@($"Are you sure you want to delete \"{expenseType.Name}\"?")>
</Confirm>

@code {

    [Parameter]
    public int? Id { get; set; }

    protected PFM.Website.Components.ConfirmBase DeleteConfirmation { get; set; }

    private ExpenseTypeModel expenseType = new ExpenseTypeModel() { GraphColor = "E5F0F4" };

    protected override async Task OnInitializedAsync()
    {
        if (!Id.HasValue)
            return;

        var model = await ExpenseTypeService.GetById(Id.Value);

        if (model == null)
            return;

        expenseType = model;
    }

    void Back()
    {
        NavigationManager.NavigateTo("/expense-types");
    }

    async Task HandleSubmit()
    {
        bool result = false;
        if (!Id.HasValue)
        {
            result = await ExpenseTypeService.Create(expenseType);
        }
        else
        {
            result = await ExpenseTypeService.Edit(Id.Value, expenseType);
        }
        if (result)
        {
            NavigationManager.NavigateTo("/expense-types");
        }
    }

    protected void Delete()
    {
        DeleteConfirmation.Show();
    }

    protected async Task ConfirmDelete(bool deleteConfirmed)
    {
        if (deleteConfirmed && expenseType.Id.HasValue)
        {
            await ExpenseTypeService.Delete(expenseType.Id.Value);
            NavigationManager.NavigateTo("/expense-types");
        }
    }

    bool isGraphColorModalOpened = false;

    void OpenGraphColorModal()
    {
        isGraphColorModalOpened = true;
    }

    void ClosedGraphColorModal(string value)
    {
        expenseType.GraphColor = value.Replace("#", "");
        isGraphColorModalOpened = false;
    }
}

