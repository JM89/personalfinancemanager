@page "/"
@page "/{accountId:int}"
@using PFM.Website.Services
@using PFM.Website.Models
@using PFM.Website.Utils
@using ChartJs.Blazor.BarChart
@using System.Drawing
@using PFM.Website.Components.Dashboard

@inject BankAccountService BankAccountService
@inject ExpenseTypeService ExpenseTypeService
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>

        <div class="row">
            <div class="col-lg-2" style="font-size: 12px; padding: 5px; border-radius: 5px;">
                <div class="row vignette purple">
                    <div class="col-lg-12">
                        @if (AvailableBankAccounts.Any())
                        {
                            <b><label>Accounts</label></b>
                            <select class="form-control" style="font-size: 12px;" value="@SelectedBankAccount?.Id" @onchange="@((e) => UpdateSelected(e))">
                                <option value=""></option>
                                @foreach (var bankAccount in @AvailableBankAccounts)
                                {
                                    <option value="@bankAccount.Id">@bankAccount.Name</option>
                                }
                            </select>
                            <br />
                            <b><label>Movements</label></b>
                            <div class="ibox-content">
                                <div class="row">
                                    <div class="col-lg-12">
                                        <a href="/expenses/list/@SelectedBankAccount?.Id">Manage expenses</a>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-12">
                                        <a href="/atm-withdraws/list/@SelectedBankAccount?.Id">Manage ATM Withdraws</a>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-12">
                                        <a href="/incomes/list/@SelectedBankAccount?.Id">Manage incomes</a>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-12">
                                        <a href="/savings/list/@SelectedBankAccount?.Id">Manage savings</a>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-12">
                                        <a href="/" class="disabled">Import movements</a>
                                    </div>
                                </div>
                            </div>
                            <br />
                            <b><label>Budget Plan</label></b>
                            <div class="ibox-content">
                                <div class="row">
                                    <div class="col-lg-12">
                                        <a href="/" class="disabled">Manage budget plan</a>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-warning" role="alert">
                                To get started with your personal finance, create a <a href="/banks/create">bank</a> and <a href="/bank-accounts/create">bank account</a>.
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-lg-5">
                <LineChartExpenseOvertime @ref="LineChartExpenseOvertime" AccountId="@SelectedBankAccount?.Id"></LineChartExpenseOvertime>
            </div>
            <div class="col-lg-5">
                @if (_splitByMovementTypeOver6Months != null)
                {
                    <Chart Config="_splitByMovementTypeOver6Months"></Chart>
                }
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-lg-2" style="font-size: 16px; padding: 5px; border-radius: 5px; color:white; text-align: right;">
                <VignetteMovementTypeSummary @ref="VignetteMovementTypeSummary" AccountId="@SelectedBankAccount?.Id" ></VignetteMovementTypeSummary>
            </div>
            <div class="col-lg-5">
                <PieChartExpenseTypeSummary @ref="PieChartExpenseTypeSummary" AccountId="@SelectedBankAccount?.Id" CategorySelected="UpdateChartsForCategory"></PieChartExpenseTypeSummary>
            </div>
            <div class="col-lg-5">
                Nothing here
            </div>
        </div>
        <hr />

        @if (selectedCategory != null)
        {
            <b><label style="font-size:12px;">Details for '@selectedCategory?.Name'</label></b>
        }
        <div class="row">
            <div class="col-lg-6">
                <BarChartExpenseTypeOvertime @ref="BarChartExpenseTypeOvertime" ExpenseTypeId="@selectedCategory?.Id" AccountId="@SelectedBankAccount?.Id"></BarChartExpenseTypeOvertime>
            </div>
            <div class="col-lg-6">
                <TableExpenseByType @ref="TableExpenseByType" ExpenseTypeId="@selectedCategory?.Id" AccountId="@SelectedBankAccount?.Id"></TableExpenseByType>
            </div>
        </div>

    </Authorized>
</AuthorizeView>


@code {

    [Parameter]
    public int? AccountId { get; set; }

    private BankAccountListModel? SelectedBankAccount;
    private IList<BankAccountListModel> AvailableBankAccounts = new List<BankAccountListModel>();
    private IList<ExpenseTypeModel> DisplayedCategories;

    protected TableExpenseByTypeBase TableExpenseByType { get; set; }
    protected BarChartExpenseTypeOvertimeBase BarChartExpenseTypeOvertime { get; set; }
    protected VignetteMovementTypeSummaryBase VignetteMovementTypeSummary { get; set; }
    protected PieChartExpenseTypeSummaryBase PieChartExpenseTypeSummary { get; set; }
    protected LineChartExpenseOvertimeBase LineChartExpenseOvertime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SelectedBankAccount = await BankAccountService.GetCurrentAccount(AccountId);
        AvailableBankAccounts = await BankAccountService.GetAll();
        var allCategories = await ExpenseTypeService.GetAll();
        DisplayedCategories = allCategories.Where(x => x.ShowOnDashboard).ToList();

        var data = new MovementSummaryStructureTests(DisplayedCategories, new List<string> { "Incomes", "Outcomes", "Savings" });

        BuildSplitByMovementTypeOver6MonthsBarChart(data);
    }

    protected async Task UpdateSelected(ChangeEventArgs referenced)
    {
        var id = Convert.ToInt32(referenced.Value);
        selectedCategory = null;
        NavigationManager.NavigateTo($"/{id}", true);
    }

    public async Task UpdateChartsForCategory(ExpenseTypeModel category)
    {
        await BarChartExpenseTypeOvertime.ReloadComponent(category.Id.Value);
        await TableExpenseByType.ReloadComponent(category.Id.Value);
        selectedCategory = category;
        this.StateHasChanged();
    }

    private ExpenseTypeModel? selectedCategory;

    private class MovementSummaryStructureTests
    {
        public IEnumerable<ExpenseTypeModel> SourceExpenseTypes;
        public IDictionary<string, int> SummaryOver12PerCategory;
        public IDictionary<string, decimal> SummaryOver12PerType;

        public MovementSummaryStructureTests(IEnumerable<ExpenseTypeModel> expenseTypes, IEnumerable<string> movementTypes)
        {
            SourceExpenseTypes = expenseTypes;
            var rng = new Random();
            SummaryOver12PerCategory = expenseTypes
                .Select(x => new KeyValuePair<string, int>(x.Name, rng.Next(1, 10)))
                .ToDictionary(x => x.Key, x => x.Value);
            SummaryOver12PerType = movementTypes
                .Select(x => new KeyValuePair<string, decimal>(x, rng.Next(100, 1000)))
                .ToDictionary(x => x.Key, x => x.Value);
        }
    }

    private BarConfig? _splitByMovementTypeOver6Months;


    private void BuildSplitByMovementTypeOver6MonthsBarChart(MovementSummaryStructureTests data)
    {
        _splitByMovementTypeOver6Months = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Position = Position.Top
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Incomes/Outcomes - Over 6 Months"
                }
            }
        };

        IDataset<int> dataset1 = new BarDataset<int>(RandomScalingFactor(7))
        {
            Label = "Incomes",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(128, ColorUtils.Green)),
            BorderColor = ColorUtil.FromDrawingColor(ColorUtils.Green),
            BorderWidth = 1
        };

        IDataset<int> dataset2 = new BarDataset<int>(RandomScalingFactor(7))
        {
            Label = "Outcomes",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(128, ColorUtils.Blue)),
            BorderColor = ColorUtil.FromDrawingColor(ColorUtils.Blue),
            BorderWidth = 1
        };

        IDataset<int> dataset3 = new BarDataset<int>(RandomScalingFactor(7))
        {
            Label = "Savings",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(128, ColorUtils.Golden)),
            BorderColor = ColorUtil.FromDrawingColor(ColorUtils.Golden),
            BorderWidth = 1
        };

        foreach (string cat in MonthYearHelper.GetXLastMonths(6, true))
        {
            _splitByMovementTypeOver6Months.Data.Labels.Add(cat);
        }

        _splitByMovementTypeOver6Months.Data.Datasets.Add(dataset1);
        _splitByMovementTypeOver6Months.Data.Datasets.Add(dataset2);
        _splitByMovementTypeOver6Months.Data.Datasets.Add(dataset3);
    }

    public static IEnumerable<int> RandomScalingFactor(int count)
    {
        int[] factors = new int[count];
        for (int i = 0; i < count; i++)
        {
            factors[i] = new Random().Next(0, 100);
        }
        return factors;
    }
}
