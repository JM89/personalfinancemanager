@page "/expenses/create/{accountId:int}"
@using PFM.Website.Services
@using PFM.Website.Models
@inject ExpenseService ExpenseService
@inject ExpenseTypeService ExpenseTypeService
@inject BankAccountService BankAccountService
@inject AtmWithdrawService AtmWithdrawService
@inject PaymentMethodService PaymentMethodService
@inject NavigationManager NavigationManager


<PageTitle>PFM - Expenses</PageTitle>

<div class="row">
    <div class="col-lg-8">
        <h3>Create Expense</h3>
        <hr />
    </div>
    @if (selectedBankAccount != null)
    {
        <div class="col-lg-4" style="text-align: left">
            <div class="alert alert-info" role="alert">
                <label><strong>Selected account: </strong></label>
                <br />
                <label>@selectedBankAccount.BankName - @selectedBankAccount?.Name</label>
                <br />
                <label>Balance: @selectedBankAccount?.DisplayedCurrentBalance</label>
            </div>
        </div>
    }
</div>

<br />
<EditForm Model="m" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="col-sm-8 text-danger">
        <ValidationSummary />
    </div>
    <div class="form-group row" style="height:50px">
        <label for="date" class="col-sm-2 col-form-label">Date</label>
        <div class="col-sm-10">
            <input class="form-control" type="date" value="@m.DateExpense.ToString("yyyy-MM-dd")" @onchange="@((e) => UpdateDate(e))" />
        </div>
        <br />
    </div>
    <div class="form-group row" style="height:50px">
        <label for="name" class="col-sm-2 col-form-label">Description</label>
        <div class="col-sm-10">
            <InputText id="description" @bind-Value="m.Description" class="form-control"></InputText>
        </div>
        <br />
    </div>
    <div class="form-group row" style="height:50px">
        <label for="cost" class="col-sm-2 col-form-label">Amount</label>
        <div class="col-sm-10">
            <InputNumber id="cost" @bind-Value="m.Cost" class="form-control"></InputNumber>
        </div>
        <br />
    </div>
    <div class="form-group row" style="height:50px">
        <label for="name" class="col-sm-2 col-form-label">Expense Types</label>
        <div class="col-sm-10">
            <select class="form-control" @bind="@m.ExpenseTypeId">
                <option value=""></option>
                @foreach (var et in @AvailableExpenseTypes)
                {
                    <option value="@et.Id">@et.Name</option>
                }
            </select>
        </div>
        <br />
    </div>
    <div class="form-group row" style="height:50px">
        <label for="name" class="col-sm-2 col-form-label">Payment Methods</label>
        <div class="col-sm-10">
            <select class="form-control" value="@m.PaymentMethodId" @onchange="@((e) => UpdatePaymentMethodSelected(e))">
                <option value=""></option>
                @foreach (var pm in @AvailablePaymentMethods)
                {
                    <option value="@pm.Id">@pm.Name</option>
                }
            </select>
        </div>
        <br />
    </div>

    <div class="form-group row" style="height:50px">
        @if (m.PaymentMethodId == 2)
        {
            <label for="name" class="col-sm-2 col-form-label">ATM Withdraws</label>
            <div class="col-sm-10">
                <select class="form-control" @bind="@m.AtmWithdrawId">
                    <option value=""></option>
                    @foreach (var a in @AvailableAtmWithdraws)
                    {
                        <option value="@a.Id">@a.Description</option>
                    }
                </select>
            </div>
            <br />
        }
        else if (m.PaymentMethodId == 5)
        {
            <label for="name" class="col-sm-2 col-form-label">Accounts</label>
            <div class="col-sm-10">
                <select class="form-control" @bind="@m.TargetInternalAccountId">
                    <option value=""></option>
                    @foreach (var ba in @AvailableBankAccounts)
                    {
                        <option value="@ba.Id">@ba.Name</option>
                    }
                </select>
            </div>
            <br />
        }
        else if (m.PaymentMethodId != 0)
        {
            <label for="alreadyDebited" class="col-sm-2 col-form-label">Already Debited</label>
            <div class="col-sm-10">
                <InputCheckbox id="alreadyDebited" @bind-Value="m.HasBeenAlreadyDebited"></InputCheckbox>
            </div>
        }
    </div>

    <br />
    <br />
    <button type="button" class="btn btn-secondary" @onclick="Back">Cancel</button>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {

    [Parameter]
    public int AccountId { get; set; }

    private ExpenseEditModel m = new ExpenseEditModel() { DateExpense = DateTime.UtcNow, PaymentMethodId = 0 };
    private BankAccountListModel? selectedBankAccount;
    private IList<PaymentMethodListModel> AvailablePaymentMethods = new List<PaymentMethodListModel>();
    private IList<AtmWithdrawListModel> AvailableAtmWithdraws = new List<AtmWithdrawListModel>();
    private IList<BankAccountListModel> AvailableBankAccounts = new List<BankAccountListModel>();
    private IList<ExpenseTypeModel> AvailableExpenseTypes = new List<ExpenseTypeModel>();

    protected override async Task OnInitializedAsync()
    {
        selectedBankAccount = await BankAccountService.GetCurrentAccount(AccountId);
        AvailablePaymentMethods = await PaymentMethodService.GetAll();
        var allAtmWithdraws = await AtmWithdrawService.GetAll(AccountId);
        AvailableAtmWithdraws = allAtmWithdraws.Where(x => !x.IsClosed).ToList();
        var allBankAccounts = await BankAccountService.GetAll();
        AvailableBankAccounts = allBankAccounts.Where(x => x.Id != AccountId).ToList();
        AvailableExpenseTypes = await ExpenseTypeService.GetAll();
    }

    void Back()
    {
        NavigationManager.NavigateTo($"/expenses/list/{AccountId}");
    }

    async Task HandleSubmit()
    {
        bool result = await ExpenseService.Create(AccountId, m);
        if (result)
        {
            NavigationManager.NavigateTo($"/expenses/list/{AccountId}");
        }
    }

    void UpdateDate(ChangeEventArgs e)
    {
        var selectedDate = e.Value ?? DateTime.UtcNow;
        m.DateExpense = DateTime.Parse(selectedDate.ToString());
    }

    protected async Task UpdatePaymentMethodSelected(ChangeEventArgs referenced)
    {
        m.PaymentMethodId = Convert.ToInt32(referenced.Value);
        // Reset
        m.AtmWithdrawId = null;
        m.TargetInternalAccountId = null;
        m.HasBeenAlreadyDebited = false;
    }
}

