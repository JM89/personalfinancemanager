networks:
  local-network:
    name: local-network
    external: true

services:

  # Simulating a centralized SQL Server instance
  db-server:
    image: mcr.microsoft.com/mssql/server:2022-latest
    profiles: ["dev", "prod"]
    container_name: db-server
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=VerySecret1234!
      - MSSQL_ENABLE_HADR=0
      - MSSQL_AGENT_ENABLED=false
      - MSSQL_MEMORY_LIMIT_MB=8000
    ports:
      - "1433:1433"
    networks:
      - local-network

  # Simulating a logging system
  seq:
    container_name: seq
    profiles: ["dev", "prod"]
    image: datalust/seq:2022.1
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:5341"
      - "80:80"
    networks:
      - local-network

  # Simulating AWS cloud 
  localstack:
    container_name: localstack
    profiles: ["dev", "prod", "frontend-dev"]
    build:
      dockerfile: Dockerfile
      context: ./localstack
    environment:
      - SERVICES=ssm,sqs,s3,kms
      - DEBUG=${DEBUG-}
      - AWS_DEFAULT_REGION=eu-west-2
      - DEFAULT_REGION=eu-west-2
      - HOSTNAME=localstack
      - LAMBDA_EXECUTOR=docker
      - DOCKER_HOST=unix:///var/run/docker.sock
    ports:
      - "4566:4566"
      - "4510:4510"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - local-network

  # Simulating Eventstore
  eventstore:
    image: eventstore/eventstore:21.10.8-buster-slim
    profiles: ["dev", "prod"]
    container_name: eventstore
    environment:
      EVENTSTORE_INSECURE: True
      EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP: True
      EVENTSTORE_RUN_PROJECTIONS: All
      EVENTSTORE_START_STANDARD_PROJECTIONS: True
    ports:
      - "2112:2112"
      - "2113:2113"
    networks:
      - local-network

  prometheus:
    image: prom/prometheus:v2.44.0
    profiles: ["dev"]
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - local-network

  grafana:
    image: grafana/grafana:8.2.6
    profiles: ["dev"]
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_INSTALL_PLUGINS:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - local-network
  
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:22.0.0
    profiles: ["dev", "prod", "frontend-dev"]
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "8080:8080"
    command: start-dev
    networks:
      - local-network

  keycloak-init:
    container_name: keycloak-init
    build:
      dockerfile: Dockerfile
      context: ./keycloak-init
    profiles: ["dev", "prod", "frontend-dev"]
    environment:
      AWS_ACCESS_KEY_ID: XX
      AWS_SECRET_ACCESS_KEY: XX
      AWS_ENDPOINT: http://localstack:4566
      AWS_REGION: eu-west-2
      KC_ENDPOINT: http://keycloak:8080
      KEYCLOAK_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_USER: admin
    networks:
      - local-network
