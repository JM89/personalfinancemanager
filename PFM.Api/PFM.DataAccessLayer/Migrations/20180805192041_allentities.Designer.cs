// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PFM.DataAccessLayer;

namespace PFM.DataAccessLayer.Migrations
{
    [DbContext(typeof(PFMContext))]
    [Migration("20180805192041_allentities")]
    partial class allentities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId");

                    b.Property<int>("CurrencyId");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(9,2)");

                    b.Property<bool>("IsFavorite");

                    b.Property<bool>("IsSavingAccount");

                    b.Property<string>("Name");

                    b.Property<string>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.AtmWithdraw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("DateExpense");

                    b.Property<bool>("HasBeenAlreadyDebited");

                    b.Property<decimal>("InitialAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<bool>("IsClosed");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AtmWithdraws");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("GeneralEnquiryPhoneNumber");

                    b.Property<string>("IconPath")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.BankBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired();

                    b.Property<string>("AddressLine2");

                    b.Property<int>("BankId");

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<string>("PostCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankBranches");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.BudgetByExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<decimal?>("Actual")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("BudgetPlanId");

                    b.Property<int>("ExpenseTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BudgetPlanId");

                    b.HasIndex("ExpenseTypeId");

                    b.ToTable("BudgetByExpenseTypes");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.BudgetPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate");

                    b.Property<decimal>("ExpectedIncomes")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("ExpectedSavings")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("BudgetPlans");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Symbol")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Currencys");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<int?>("AtmWithdrawId");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("DateExpenditure");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("ExpenseTypeId");

                    b.Property<int?>("GeneratedIncomeId");

                    b.Property<bool>("HasBeenAlreadyDebited");

                    b.Property<int>("PaymentMethodId");

                    b.Property<int?>("TargetInternalAccountId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AtmWithdrawId");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TargetInternalAccountId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GraphColor")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("ShowOnDashboard");

                    b.HasKey("Id");

                    b.ToTable("ExpenseTypes");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.FrequenceOption", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FrequenceOptions");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.HistoricMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("DestinationId");

                    b.Property<decimal>("DestinationNewAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("DestinationOldAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("DestinationType");

                    b.Property<int>("SourceId");

                    b.Property<decimal>("SourceNewAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("SourceOldAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("SourceType");

                    b.HasKey("Id");

                    b.ToTable("HistoricMovements");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("DateIncome");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CssClass");

                    b.Property<bool>("HasBeenAlreadyDebitedOption");

                    b.Property<string>("IconClass");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Pension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CompanyContributionPercentage")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("ContributionPercentage")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("CountryId");

                    b.Property<int>("CurrencyId");

                    b.Property<decimal>("CurrentPot")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("EndDate");

                    b.Property<decimal>("Interest")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<string>("Website")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Pensions");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("EndDate");

                    b.Property<decimal>("MonthlyGrossPay")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("MonthlyNetPay")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("TaxId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<decimal>("YearlySalary")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TaxId");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.SalaryDeduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("SalaryId");

                    b.HasKey("Id");

                    b.HasIndex("SalaryId");

                    b.ToTable("SalaryDeductions");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Saving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("DateSaving");

                    b.Property<int?>("GeneratedIncomeId");

                    b.Property<int>("TargetInternalAccountId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GeneratedIncomeId");

                    b.HasIndex("TargetInternalAccountId");

                    b.ToTable("Savings");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Code");

                    b.Property<int>("CountryId");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("EndDate");

                    b.Property<int?>("Frequence");

                    b.Property<int>("FrequenceOptionId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("TaxTypeId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FrequenceOptionId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.TaxType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TaxTypes");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("SourceWages")
                        .IsRequired();

                    b.Property<string>("User_Id")
                        .IsRequired();

                    b.Property<decimal>("YearlyWages")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Account", b =>
                {
                    b.HasOne("PFM.DataAccessLayer.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PFM.DataAccessLayer.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.AtmWithdraw", b =>
                {
                    b.HasOne("PFM.DataAccessLayer.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Bank", b =>
                {
                    b.HasOne("PFM.DataAccessLayer.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.BankBranch", b =>
                {
                    b.HasOne("PFM.DataAccessLayer.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.BudgetByExpenseType", b =>
                {
                    b.HasOne("PFM.DataAccessLayer.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PFM.DataAccessLayer.Entities.BudgetPlan", "BudgetPlan")
                        .WithMany()
                        .HasForeignKey("BudgetPlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PFM.DataAccessLayer.Entities.ExpenseType", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Expense", b =>
                {
                    b.HasOne("PFM.DataAccessLayer.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PFM.DataAccessLayer.Entities.AtmWithdraw", "AtmWithdraw")
                        .WithMany()
                        .HasForeignKey("AtmWithdrawId");

                    b.HasOne("PFM.DataAccessLayer.Entities.ExpenseType", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PFM.DataAccessLayer.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PFM.DataAccessLayer.Entities.Account", "TargetInternalAccount")
                        .WithMany()
                        .HasForeignKey("TargetInternalAccountId");
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Income", b =>
                {
                    b.HasOne("PFM.DataAccessLayer.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Pension", b =>
                {
                    b.HasOne("PFM.DataAccessLayer.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PFM.DataAccessLayer.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Salary", b =>
                {
                    b.HasOne("PFM.DataAccessLayer.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PFM.DataAccessLayer.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PFM.DataAccessLayer.Entities.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.SalaryDeduction", b =>
                {
                    b.HasOne("PFM.DataAccessLayer.Entities.Salary", "Salary")
                        .WithMany()
                        .HasForeignKey("SalaryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Saving", b =>
                {
                    b.HasOne("PFM.DataAccessLayer.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PFM.DataAccessLayer.Entities.Income", "GeneratedIncome")
                        .WithMany()
                        .HasForeignKey("GeneratedIncomeId");

                    b.HasOne("PFM.DataAccessLayer.Entities.Account", "TargetInternalAccount")
                        .WithMany()
                        .HasForeignKey("TargetInternalAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PFM.DataAccessLayer.Entities.Tax", b =>
                {
                    b.HasOne("PFM.DataAccessLayer.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PFM.DataAccessLayer.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PFM.DataAccessLayer.Entities.FrequenceOption", "FrequenceOption")
                        .WithMany()
                        .HasForeignKey("FrequenceOptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PFM.DataAccessLayer.Entities.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
