@model PersonalFinanceManager.Models.Expenditure.ExpenditureEditModel

@{
    Layout = "~/Views/Shared/_LayoutEditor.cshtml";
    ViewBag.PageTitle = "Manage expenditures";
    ViewBag.FormTitle = "Edit expenditure";
}

@section BreadCrumbSection
{
    <li>
        @*Bank Account <a href="/BankAccount/Details/@ViewBag.AccountId"></a>*@
        @ViewBag.AccountName
    </li>
    <li>
        Mouvements
    </li>
    <li class="active">
        <strong>@ViewBag.FormTitle</strong>
    </li>
}

@section AccountDetails
{
    <div class="alert alert-info" role="alert">
        <table>
            <tr>
                <td><strong>@Html.DisplayName("Current Amount:")</strong></td>
                <td>@ViewBag.CurrentAmount</td>
            </tr>
        </table>
    </div>
}

@section EditorSection
{
    
    @using (Html.BeginForm()) 
    {
        @Html.AntiForgeryToken()
    
        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <input type="hidden" value="@ViewBag.AccountId" />
                         
            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DateExpenditure, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-10">
                    @Html.TextBoxFor(model => model.DateExpenditure, new { @Value = Model.DisplayedDateExpenditure, @class = "form-control datepicker" })
                    @Html.ValidationMessageFor(model => model.DateExpenditure, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-10">
                    @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TypeExpenditureId, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-10">
                    @Html.DropDownListFor(model => model.TypeExpenditureId, @Model.AvailableExpenditureTypes, "", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TypeExpenditureId, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.PaymentMethodId, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-10">
                    <select class="form-control" data-val="true" data-val-number="The field Id must be a number." data-val-required="The Payment Method field is required." id="paymentMethodId" name="paymentMethodId" value="@Model.PaymentMethodId">
                        <option value=""></option>
                        @foreach (var paymentMethod in @Model.AvailablePaymentMethods)
                        {
                            if (@paymentMethod.Id == @Model.PaymentMethodId)
                            {
                                <option value="@paymentMethod.Id" selected="selected">@paymentMethod.Name</option>
                            }
                            else
                            {
                                <option value="@paymentMethod.Id">@paymentMethod.Name</option>
                            }
                        }
                    </select>

                    @foreach (var paymentMethod in @Model.AvailablePaymentMethods)
                    {
                        <input type="hidden" value="@Html.AttributeEncode(@paymentMethod.HasBeenAlreadyDebitedOption)" id="HasBeenAlreadyDebitedOption_@paymentMethod.Id" />
                        <input type="hidden" value="@Html.AttributeEncode(@paymentMethod.HasAtmWithdrawOption)" id="HasAtmWithdrawOption_@paymentMethod.Id" />
                        <input type="hidden" value="@Html.AttributeEncode(@paymentMethod.HasInternalAccountOption)" id="HasInternalAccountOption_@paymentMethod.Id" />
                    }

                    @Html.ValidationMessageFor(model => model.PaymentMethodId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" id="HasBeenAlreadyDebitedOptionalField">
                @Html.LabelFor(model => model.HasBeenAlreadyDebited, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-10">
                    @Html.EditorFor(model => model.HasBeenAlreadyDebited, new { htmlAttributes = new {  } })
                    @Html.ValidationMessageFor(model => model.HasBeenAlreadyDebited, "", new { @class = "text-danger" })
                </div>
            </div>
            
            <div class="form-group" id="HasAtmWithdrawOptionalField">
                @Html.LabelFor(model => model.AtmWithdrawId, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-10">
                    @Html.DropDownListFor(model => model.AtmWithdrawId, @Model.AvailableAtmWithdraws, "", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AtmWithdrawId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" id="HasInternalAccountOptionalField">
                @Html.LabelFor(model => model.TargetInternalAccountId, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-10">
                    @Html.DropDownListFor(model => model.TargetInternalAccountId, @Model.AvailableInternalAccounts, "", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TargetInternalAccountId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-lg-offset-2 col-lg-10">
                    <input type="submit" value="@Resources.ButtonNames.EditSaveButton" class="btn btn-primary btn_save" onclick="returnToList()" />
                    @Html.ActionLink(Resources.ButtonNames.CancelButton, "Index", new { accountId = @ViewBag.AccountId }, htmlAttributes: new { @class = "btn btn-default" })
                </div>
            </div>
        </div>
    }

    @*<div>
        @Html.ActionLink("Back to List", "Index", new { accountId = @ViewBag.AccountId })
    </div>*@


}

@section ScriptsSection
{
    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/Scripts/jquery-ui-1.11.4.js"></script>
    <script src="~/Scripts/custom/Expenditure.js"></script>
    <script type="text/javascript">

        $(function () {
            $("#DateExpenditure").datepicker({
                dateFormat: "dd/mm/yy"
            });

            $.validator.methods.date = function (value, element) {
                Globalize.culture("en-UK");
                return this.optional(element) || Globalize.parseDate(value) !== null;
            }

            showHideOptions();

            $("#paymentMethodId").change(function () {
                showHideOptions();
            });

        });



    </script>
}
