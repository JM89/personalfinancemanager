@model PersonalFinanceManager.Models.PeriodicOutcome.PeriodicOutcomeEditModel

@{
    Layout = "~/Views/Shared/_LayoutEditor.cshtml";
    ViewBag.PageTitle = Resources.TitleNames.PeriodicOutcomePages;
    ViewBag.FormTitle = Resources.TitleNames.PeriodicOutcomeCreate;
}

@section EditorSection
{
    @using (Html.BeginForm("Create", "PeriodicOutcome", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
      
        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-10">
                    @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
                </div>
            </div>
            
            <div class="form-group">
                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-10">
                    @Html.TextBoxFor(model => model.StartDate, new { @Value = Model.DisplayedStartDate, @class = "form-control datepicker" })
                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AccountId, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-10">
                    @Html.DropDownListFor(model => model.AccountId, @Model.AvailableAccounts, "", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AccountId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FrequencyId, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-10">
                    @Html.DropDownListFor(model => model.FrequencyId, @Model.AvailableFrequencies, "", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.FrequencyId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TypeExpenditureId, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-10">
                    @Html.DropDownListFor(model => model.TypeExpenditureId, @Model.AvailableExpenditureTypes, "", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TypeExpenditureId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="@Resources.ButtonNames.AddSaveButton" class="btn btn-primary" />

                    @Html.ActionLink(Resources.ButtonNames.CancelButton, "Index", null, htmlAttributes: new { @class = "btn btn-default" })
                </div>
            </div>

        </div>
    }

}

@section ScriptsSection {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(function () {
            $.validator.methods.date = function (value, element) {
                Globalize.culture("en-UK");
                return this.optional(element) || Globalize.parseDate(value) !== null;
            }
        });
    </script>
}


